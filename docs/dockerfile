# 优化后的Dockerfile
FROM ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Shanghai \
    PATH=/usr/local/bin:$PATH \
    PYTHONIOENCODING=utf-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    # 编译器相关（使用GCC默认版本）
    CC=gcc \
    CXX=g++ \
    # CMake相关
    CMAKE_BUILD_TYPE=Release \
    # 开发工具
    EDITOR=vim \
    # 库路径
    PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig \
    LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib \
    # OpenMP相关
    OMP_NUM_THREADS=4 \
    # 构建相关
    MAKEFLAGS=-j20 \
    # Python相关
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# 创建工作目录
WORKDIR /app

# 配置镜像源和安装基础包（合并减少层数）
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    sed -i 's|http://archive.ubuntu.com/ubuntu/|http://mirrors.aliyun.com/ubuntu/|g' /etc/apt/sources.list && \
    sed -i 's|http://security.ubuntu.com/ubuntu/|http://mirrors.aliyun.com/ubuntu/|g' /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        # 基础工具
        wget tar cmake build-essential vim git tree \
        gdb valgrind strace pkg-config \
        # 网络工具
        net-tools netstat-nat \
        # Python相关
        python3-dev python3-pip \
        # 科学计算库
        libeigen3-dev libfftw3-dev \
        gsl-bin libgsl-dev \
        liblapack-dev libblas-dev \
        # AgentFlow需要的包
        graphviz software-properties-common \
        # GPG工具（PPA需要）
        gnupg2 gpg-agent \
        # 其他工具
        openssh-server && \
    # 清理缓存
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# 添加PPA源并安装clang-uml
RUN export GPG_TTY=$(tty) && \
    gpg-agent --daemon && \
    add-apt-repository -y ppa:bkryza/clang-uml && \
    apt-get update && \
    apt-get install -y --no-install-recommends clang llvm-dev libclang-dev clang-format clang-tidy clang-tools lld libomp-dev &&\
    apt-get install -y --no-install-recommends clang-uml && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 配置pip镜像源和安装Python包
RUN pip3 config set global.index-url http://mirrors.aliyun.com/pypi/simple/ && \
    pip3 config set global.trusted-host mirrors.aliyun.com && \
    python3 -m pip install --upgrade pip

# 安装Python包
RUN pip3 install --no-cache-dir \
    # 基础包
    setuptools pybind11 \
    # 科学计算包
    numpy scipy matplotlib pandas \
    # AgentFlow相关包
    autogen-agentchat \
    autogen-ext[openai,azure] \
    toml graphviz pydotplus libclang pylint mcp \
    # 其他专用包
    mem0ai
RUN pip3 install --no-cache-dir PyYAML

# 重新设置工作目录
WORKDIR /app

# 创建简化的环境设置脚本
RUN echo '#!/bin/bash' > /usr/local/bin/setup-env.sh && \
    echo '# 设置开发环境变量' >> /usr/local/bin/setup-env.sh && \
    echo 'export CC=gcc' >> /usr/local/bin/setup-env.sh && \
    echo 'export CXX=g++' >> /usr/local/bin/setup-env.sh && \
    echo 'export EDITOR=vim' >> /usr/local/bin/setup-env.sh && \
    echo 'export OMP_NUM_THREADS=$(nproc)' >> /usr/local/bin/setup-env.sh && \
    echo 'export MAKEFLAGS=-j$(nproc)' >> /usr/local/bin/setup-env.sh && \
    echo 'echo "开发环境已配置完成"' >> /usr/local/bin/setup-env.sh && \
    echo 'echo "GCC版本: $(gcc --version | head -1)"' >> /usr/local/bin/setup-env.sh && \
    echo 'echo "Clang版本: $(clang --version | head -1)"' >> /usr/local/bin/setup-env.sh && \
    echo 'echo "Python版本: $(python3 --version)"' >> /usr/local/bin/setup-env.sh && \
    ## Clang llVM环境变量添加
    echo 'export PATH=/usr/lib/llvm-14/bin:$PATH' >> /usr/local/bin/setup-env.sh && \
    echo 'export LD_LIBRARY_PATH=/usr/lib/llvm-14/lib:$LD_LIBRARY_PATH' >> /usr/local/bin/setup-env.sh && \
    echo 'export CMAKE_PREFIX_PATH=/usr/lib/llvm-14/lib/cmake' >> /usr/local/bin/setup-env.sh && \
    chmod +x /usr/local/bin/setup-env.sh


# 配置SSH（如果需要）
RUN if [ -f /etc/ssh/sshd_config ]; then \
        mkdir -p /var/run/sshd && \
        echo "PermitRootLogin yes" >> /etc/ssh/sshd_config; \
    fi




# 配置环境
RUN echo 'alias python=python3' >> /etc/bash.bashrc && \
    echo 'source /usr/local/bin/setup-env.sh' >> /etc/bash.bashrc && \
    printf "\nset fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936,latin1\nset encoding=utf-8\nset termencoding=utf-8\n" >> /etc/vim/vimrc


# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python3 --version || exit 1

# 默认命令
# CMD ["/bin/bash"]
CMD ["python3", "/app/mcp_server.py"]